169. Majority Element
Solved
Easy
Topics
Companies

Given an array nums of size n, return the majority element.

The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.

 

Example 1:

Input: nums = [3,2,3]
Output: 3

Example 2:

Input: nums = [2,2,1,1,1,2,2]
Output: 2

 

Constraints:

    n == nums.length
    1 <= n <= 5 * 104
    -109 <= nums[i] <= 109

 
Follow-up: Could you solve the problem in linear time and in O(1) space?

class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int candidate = 0;  // To store the majority element candidate
        int count = 0;  // Counter to track the frequency of the candidate
        
        // Step 1: Find the candidate using Boyer-Moore Voting Algorithm
        for (int num : nums) {
            if (count == 0) {
                candidate = num;  // Choose a new candidate
            }
            count += (num == candidate) ? 1 : -1;
        }
        
        // Step 2: Return the candidate (majority element)
        return candidate;
    }
};
